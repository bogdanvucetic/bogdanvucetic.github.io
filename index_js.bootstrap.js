"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_js"],{

/***/ "../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata.js":
/*!********************************************************************!*\
  !*** ../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cell: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.Cell),\n/* harmony export */   Line: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.Line),\n/* harmony export */   __wbg_buffer_609cc3eee51ed158: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_buffer_609cc3eee51ed158),\n/* harmony export */   __wbg_new_a12002a7f91c75be: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_a12002a7f91c75be),\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm),\n/* harmony export */   __wbindgen_init_externref_table: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_init_externref_table),\n/* harmony export */   __wbindgen_memory: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_memory),\n/* harmony export */   __wbindgen_throw: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_throw),\n/* harmony export */   get_memory_buffer: () => (/* reexport safe */ _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.get_memory_buffer)\n/* harmony export */ });\n/* harmony import */ var _wasm_1d_automata_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wasm_1d_automata_bg.wasm */ \"../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.wasm\");\n/* harmony import */ var _wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_1d_automata_bg.js */ \"../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.js\");\n\n\n\n(0,_wasm_1d_automata_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm)(_wasm_1d_automata_bg_wasm__WEBPACK_IMPORTED_MODULE_1__);\n_wasm_1d_automata_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_start();\n\n\n//# sourceURL=webpack://create-wasm-app/../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata.js?");

/***/ }),

/***/ "../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.js":
/*!***********************************************************************!*\
  !*** ../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cell: () => (/* binding */ Cell),\n/* harmony export */   Line: () => (/* binding */ Line),\n/* harmony export */   __wbg_buffer_609cc3eee51ed158: () => (/* binding */ __wbg_buffer_609cc3eee51ed158),\n/* harmony export */   __wbg_new_a12002a7f91c75be: () => (/* binding */ __wbg_new_a12002a7f91c75be),\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbindgen_init_externref_table: () => (/* binding */ __wbindgen_init_externref_table),\n/* harmony export */   __wbindgen_memory: () => (/* binding */ __wbindgen_memory),\n/* harmony export */   __wbindgen_throw: () => (/* binding */ __wbindgen_throw),\n/* harmony export */   get_memory_buffer: () => (/* binding */ get_memory_buffer)\n/* harmony export */ });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n/**\n * @returns {Uint8Array}\n */\nfunction get_memory_buffer() {\n    const ret = wasm.get_memory_buffer();\n    return ret;\n}\n\n/**\n * @enum {1 | 0}\n */\nconst Cell = Object.freeze({\n    Alive: 1, \"1\": \"Alive\",\n    Dead: 0, \"0\": \"Dead\",\n});\n\nconst LineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_line_free(ptr >>> 0, 1));\n\nclass Line {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Line.prototype);\n        obj.__wbg_ptr = ptr;\n        LineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_line_free(ptr, 0);\n    }\n    tick() {\n        wasm.line_tick(this.__wbg_ptr);\n    }\n    /**\n     * @returns {Line}\n     */\n    static new() {\n        const ret = wasm.line_new();\n        return Line.__wrap(ret);\n    }\n    /**\n     * @param {number} rule\n     */\n    change_rule(rule) {\n        wasm.line_change_rule(this.__wbg_ptr, rule);\n    }\n    /**\n     * @param {number} sim_length\n     */\n    set_length(sim_length) {\n        wasm.line_set_length(this.__wbg_ptr, sim_length);\n    }\n    /**\n     * @returns {number}\n     */\n    length() {\n        const ret = wasm.line_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    cells() {\n        const ret = wasm.line_cells(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nfunction __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nfunction __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nfunction __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_0;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nfunction __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack://create-wasm-app/../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.js?");

/***/ }),

/***/ "../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.wasm":
/*!*************************************************************************!*\
  !*** ../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.wasm ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.id];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name) exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_1d_automata_bg.js */ \"../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"\"]()\n\n//# sourceURL=webpack://create-wasm-app/../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-1d-automata */ \"../../../../Desktop/wasm-1d-automata/pkg/wasm_1d_automata.js\");\n\r\n\r\nconst memoryView = (0,wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.get_memory_buffer)();\r\n\r\nconst line = wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Line.new();\r\n\r\nconst ruleTiles = document.querySelectorAll(\".rule-tile\");\r\nconst ruleNumberInput = document.getElementById(\"rule-number-input\");\r\nconst preset = document.getElementById(\"presets\");\r\nconst gridSizeInput = document.getElementById(\"grid-size\");\r\nconst generateButton = document.getElementById(\"generate-button\");\r\nconst canvas = document.getElementById(\"automata-canvas\");\r\n\r\nlet ruleValue = 30;\r\nlet cellSize = 10;\r\nlet length = line.length();\r\nlet row = 0;\r\nlet animationId = null;\r\nconst ticksPerFrame = 5;\r\n\r\nconst DEAD_COLOR = \"#fafafa\";\r\nconst ALIVE_COLOR = \"#333333\";\r\n\r\ncanvas.width = 1000;\r\ncanvas.height = 1000;\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nfunction convertTilesToRule() {\r\n  let newRule = 0;\r\n  ruleTiles.forEach(tile => {\r\n    const index = parseInt(tile.getAttribute(\"data-index\"));\r\n    const bottomCell = tile.querySelector(\".bot-row .cell.toggle\");\r\n    const isAlive = bottomCell.classList.contains(\"alive\"); \r\n    if (isAlive) {\r\n      const bitPos = 7 - index;\r\n      newRule |= (1 << bitPos);\r\n    }\r\n  });\r\n  ruleValue = newRule;\r\n}\r\n\r\nfunction handleTileClick(event) {\r\n  const bottomCell = event.currentTarget;\r\n  bottomCell.classList.toggle(\"alive\");\r\n  bottomCell.classList.toggle(\"dead\");\r\n\r\n  convertTilesToRule();\r\n\r\n  updateRuleNumber(ruleValue);\r\n  updatePreset(ruleValue);\r\n}\r\n\r\nfunction updateTiles(ruleValue) {\r\n  ruleTiles.forEach(tile => {\r\n    const index = parseInt(tile.getAttribute(\"data-index\"));\r\n    const bottomCell = tile.querySelector(\".bot-row .cell.toggle\");\r\n    \r\n    const bitPos = 7 - index;\r\n    const mask = 1 << bitPos;\r\n    \r\n    const isAlive = (ruleValue & mask) !== 0;\r\n    \r\n    if (isAlive) {\r\n      bottomCell.classList.add(\"alive\");\r\n      bottomCell.classList.remove(\"dead\");\r\n    } else {\r\n      bottomCell.classList.add(\"dead\");\r\n      bottomCell.classList.remove(\"alive\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateRuleNumber(ruleValue) {\r\n  ruleNumberInput.value = ruleValue;\r\n}\r\n\r\nfunction updatePreset(ruleValue) {\r\n  const ruleStr = ruleValue.toString();\r\n  let presetFound = false;\r\n\r\n  for (let i = 0; i < preset.options.length; i++) {\r\n    if (preset.options[i].value === ruleStr) {\r\n      preset.selectedIndex = i;\r\n      presetFound = true;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  if (!presetFound) {\r\n    preset.selectedIndex = -1;\r\n  }\r\n}\r\n\r\nfunction resetCells() {\r\n  const cellsPtr = line.cells();\r\n  const cells = new Uint8Array(memoryView.buffer, cellsPtr, length);\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    cells[i] = wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Cell.Dead;\r\n  }\r\n\r\n  let middle = Math.floor(length / 2);\r\n  cells[middle] = wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Cell.Alive;\r\n}\r\n\r\nfunction randomizeCells() {\r\n  const cellsPtr = line.cells();\r\n  const cells = new Uint8Array(memoryView.buffer, cellsPtr, length);\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    let randomNum = Math.random();\r\n\r\n    if (randomNum < 0.5) {\r\n        cells[i] = wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Cell.Alive;\r\n    } else {\r\n        cells[i] = wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Cell.Dead;\r\n    }\r\n  }\r\n}\r\n\r\nfunction resizeGrid() {\r\n  const new_length = gridSizeInput.value;\r\n\r\n  if (!isNaN(new_length) && 1 <= new_length && new_length <= 1000) {\r\n    line.set_length(new_length);\r\n    length = new_length;\r\n    cellSize = canvas.width / new_length;\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nruleTiles.forEach(tile => {\r\n  const bottomCell = tile.querySelector(\".bot-row .cell.toggle\");\r\n\r\n  bottomCell.addEventListener(\"click\", handleTileClick);\r\n});\r\n\r\npreset.addEventListener(\"change\", (event) => {\r\n  ruleValue = event.target.value;\r\n\r\n  updateTiles(ruleValue);\r\n  updateRuleNumber(ruleValue);\r\n});\r\n\r\nruleNumberInput.addEventListener(\"change\", (event) => {\r\n  ruleValue = event.target.value;\r\n\r\n  if (!isNaN(ruleValue) && 0 <= ruleValue && ruleValue <= 255) {\r\n    updateTiles(ruleValue);\r\n  } else {\r\n    updateTiles(0);\r\n  }\r\n\r\n  updatePreset(ruleValue);\r\n});\r\n\r\ngenerateButton.addEventListener(\"click\", function(event) {\r\n  let startingCond = document.getElementById(\"starting-condition\").value;\r\n  let valid_grid_size = resizeGrid();\r\n\r\n  if (valid_grid_size) {\r\n    if (!isNaN(ruleValue) && 0 <= ruleValue && ruleValue <= 255) {\r\n      if (animationId !== null) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n\r\n      row = 0;\r\n      const rule = ruleValue;\r\n      line.change_rule(rule);\r\n\r\n      if (startingCond === \"singleCell\") {\r\n          resetCells();\r\n      } else {\r\n          randomizeCells();\r\n      }\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      drawCells();\r\n      animationId = requestAnimationFrame(renderLoop);\r\n    } else {\r\n      alert(\"Invalid rule (value must be between 0 and 255).\");  \r\n    }\r\n  } else {\r\n    alert(\"Invalid grid size (value must be between 1 and 1000).\");\r\n  }\r\n});\r\n\r\nconst drawCells = () => {\r\n  const cellsPtr = line.cells();\r\n  const cells = new Uint8Array(memoryView.buffer, cellsPtr, length);\r\n\r\n  ctx.beginPath();\r\n\r\n  for (let i = 0; i < length; i++) {  \r\n    ctx.fillStyle = cells[i] === wasm_1d_automata__WEBPACK_IMPORTED_MODULE_0__.Cell.Dead\r\n      ? DEAD_COLOR\r\n      : ALIVE_COLOR;\r\n\r\n    ctx.fillRect(\r\n      i * cellSize,\r\n      row,\r\n      cellSize,\r\n      cellSize\r\n    );\r\n  }\r\n\r\n  ctx.stroke();\r\n};\r\n\r\nconst renderLoop = () => {\r\n  for (let i = 0; i < ticksPerFrame; i++) {\r\n    line.tick();\r\n    row += cellSize;\r\n\r\n    if (row >= canvas.height) {\r\n      cancelAnimationFrame(animationId);\r\n      return;\r\n    }\r\n\r\n    drawCells();\r\n  }\r\n\r\n  animationId = requestAnimationFrame(renderLoop);\r\n};\n\n//# sourceURL=webpack://create-wasm-app/./index.js?");

/***/ })

}]);